import dash_core_components as dcc
import dash_bootstrap_components as dbc
import dash_html_components as html
from dash.dependencies import Input, Output, ALL
from dash.exceptions import PreventUpdate

import dash

from app import app

from .base.sentiment_utils import Sentiment
from .base.general_utils import ipsum_lorem, build_parameters_markdown, build_strategy_summary
from .base.charts_utils import Chart, init_chart

sentiment = Sentiment()

SPINNER = "cube"

# suggestions = ["AAPL", "QQQ.US_5", "GOOG", "MSFT"]; # generated by, i.e. query to db
# new_suggestions = None

layout = html.Div([

    html.Div(
        [
            html.Div([
                html.H3("Sentiment"),
            ], className='title'),
            # dcc.Input(id='input-1',
            #     type='text',
            #     value='',
            #     placeholder='Search for indices...',
            #     className="search-box"
            # ),
            html.Div(
                # children=[html.Button(text, value=text, n_clicks=0, id={'type':'sug-btn','index':i} ,className='suggestion-btn') for i,text in enumerate(sentiment.matched_tickers)],
                dcc.Dropdown(
                    id='ticker-selection',
                    options=[{'label':value, 'value':value} for value in sentiment.tickers],
                    value='TSLA'
                ),
                className='suggestion-div',
                id='suggestion-div'            
            )
        ], 
        className="search-div"
    ),
    html.Div(
        [
            html.Div(
                [
                    dcc.Loading(dcc.Graph(id="sentiment-chart"), type=SPINNER)
                ],
                id='sentiment-graph'
            ),
            html.Div(
                [
                    html.H4('News feed'),
                    html.Div(
                        [
                            html.H5('List of news')
                        ],
                        id='news-list'
                    )
                ],
                id='sentiment-news'
            ),
        ],
        className='news-container'
    )

], className='sentiment-div')

@app.callback(
    [Output('sentiment-chart',"figure"),Output('news-list',"children")],
    [Input('ticker-selection','value')]
    )

def render_eSearch(ticker):
    if ticker == None:
        raise PreventUpdate
        # return [html.Div([html.Button(text, value=text,n_clicks=0, id={'type':'sug-btn','index':i}, className='suggestion-btn') for i,text in enumerate(sentiment.default_matches)])]
    
    # new_suggestion = sentiment.find_match(ticker_part)
    # if len(new_suggestion) == 0:
    #     return [html.H4('No such ticker')]
    # new_suggestion = [html.Div([html.Button(text, value=text,n_clicks=0, id={'type':'sug-btn','index':i},className='suggestion-btn') for i,text in enumerate(new_suggestion)])]

    # return new_suggestion

    df = sentiment.get_sentiment_data(ticker)
    sentiment_chart = Chart('Sentiment')
    sentiment_chart.draw_sentiment_chart(df)
    sentiment_fig = sentiment_chart.get_chart()

    return sentiment_fig, 'List of news for: ' + ticker

# @app.callback(
#     [Output('sentiment-graph',"children"),Output('sentiment-news',"children")],
#     [Input({'type':'sug-btn','index':ALL},'value')]
#     )
# def render_data(ticker):
#     print(ticker)
#     print(dash.callback_context.triggered[0])
#     if ticker == None:
#         raise PreventUpdate

#     return [html.H1(ticker)],[html.H1(ticker)]